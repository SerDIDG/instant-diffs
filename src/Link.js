import $ from 'jquery';
import mw from 'mediawiki';

import id from './id';
import * as utils from './utils';

import Dialog from './Dialog';
import Button from './Button';

import './styles/links.less';

function Link( node, options ) {
    this.node = node;
    this.options = $.extend( true, {
        type: null,                     // diff | revision | null
        typeVariant: null,
        behavior: 'default',            // default | basic | event
        insertMethod: 'insertAfter',
        initiatorLink: null,
        initiatorDialog: null,
        initiatorDiff: null,
        onOpen: function () {},
        onClose: function () {},
    }, options );

    this.nodes = {};
    this.page = {};
    this.action = {};
    this.mw = {
        hasLink: false,
        hasLine: false,
    };
    this.manual = {
        hasLink: false,
        behavior: 'default',
    };
    this.isLoading = false;
    this.isLoaded = false;
    this.isProcessed = false;
    this.hasRequest = false;

    // Check if a link was opened from the ID dialog
    if ( id.local.dialog && id.local.dialog.isParent( this.node ) ) {
        this.options.initiatorDialog = id.local.dialog;
        this.options.initiatorDiff = id.local.dialog.getDiff();
    }

    // Check if a link generated by MediaWiki
    this.mw.hasLink = utils.isMWLink( this.node, id.config.mwLink );
    if ( this.mw.hasLink ) {
        this.mw.link = this.node;

        this.mw.isAltTitle = utils.isMWLink( this.mw.link, id.config.mwLinkAltTitle );
        this.mw.isDiffOnly = utils.isMWLink( this.mw.link, id.config.mwLinkDiffOnly );
        this.mw.isExcluded = utils.isMWLink( this.mw.link, id.config.mwLinkExclude );
        if ( !this.mw.isExcluded ) {
            this.options.behavior = 'basic';
        }
        this.mw.isPrepend = utils.isMWLink( this.mw.link, id.config.mwLinkPrepend );
        if ( this.mw.isPrepend ) {
            this.options.insertMethod = 'insertBefore';
        }

        this.mw.line = utils.getMWDiffLine( this.mw );
        if ( this.mw.line ) {
            this.mw.hasLine = true;
            this.mw.$line = $( this.mw.line ).addClass( 'instantDiffs-line' );
            this.mw.title = utils.getMWDiffLineTitle( this.mw );
        }
    }

    // Check if a link was marked manually by the "data-instantdiffs-link" attribute: default | basic | event | link (deprecated)
    this.manual.behavior = this.node.dataset.instantdiffsLink;
    if ( this.manual.behavior === 'link' ) {
        this.manual.behavior = 'event';
    }
    if ( [ 'default', 'basic', 'event' ].includes( this.manual.behavior ) ) {
        this.options.behavior = this.manual.behavior;
        this.manual.hasLink = true;
    }

    // Validate configuration
    this.config = $.extend( {}, utils.defaults(), {
        showPageLink: utils.defaults( 'showPageLink' ) && this.options.behavior === 'default',
    } );

    id.local.links.set( this.node, this );

    this.process();
}

Link.prototype.process = function () {
    this.href = this.node.href;
    if ( utils.isEmpty( this.href ) ) return;

    // Validate url
    const urlParts = {};
    try {
        this.url = new URL( this.href );
        urlParts.title = this.url.searchParams.get( 'title' );
        urlParts.pathname = decodeURIComponent( this.url.pathname );
        urlParts.pathnameNormalized = urlParts.pathname.replace( new RegExp( id.local.mwArticlePath ), '' );
    } catch ( e ) {
        return;
    }

    // Get link origin and index.php endpoint
    this.page.origin = this.url.origin;
    this.page.mwEndPoint = `${ this.page.origin }${ mw.config.get( 'wgScript' ) }`;
    this.page.mwEndPointUrl = new URL( this.page.mwEndPoint );

    if ( id.local.specialPagesSearchRegExp.test( urlParts.title ) ) {
        // Get components from splitting url title
        this.page = $.extend( this.page, utils.getSplitSpecialUrl( urlParts.title ) );
    } else if ( id.local.specialPagesPathRegExp.test( urlParts.pathname ) ) {
        // Get components from splitting url pathname
        this.page = $.extend( this.page, utils.getSplitSpecialUrl( urlParts.pathnameNormalized ) );
    } else {
        // Get components from url search parameters
        const components = [ 'title', 'curid', 'oldid', 'diff', 'direction' ];
        components.forEach( component => {
            this.page[ component ] = this.url.searchParams.get( component );
        } );

        // As a last resort, get the page title from url pathname
        if ( utils.isEmpty( this.page.title ) && id.local.articlePathRegExp.test( urlParts.pathname ) ) {
            this.page.title = urlParts.pathnameNormalized;
        }
    }

    // Check if parameter values following by pipeline
    if ( !utils.isEmpty( this.page.diff ) && this.page.diff.indexOf( '|' ) > -1 ) {
        this.page.diff = this.page.diff.split( '|' ).shift();
    }
    if ( !utils.isEmpty( this.page.oldid ) && this.page.oldid.indexOf( '|' ) > -1 ) {
        this.page.oldid = this.page.oldid.split( '|' ).shift();
    }
    if ( !utils.isEmpty( this.page.curid ) && this.page.curid.indexOf( '|' ) > -1 ) {
        this.page.curid = this.page.curid.split( '|' ).shift();
    }

    // Validate components
    if ( [ 0, '0', 'current' ].includes( this.page.diff ) ) {
        this.page.diff = 'cur';
    }
    if ( !utils.isValidDir( this.page.direction ) ) {
        this.page.direction = 'prev';
    }

    // Populate the page title from the watchlist line entry for edge cases
    // Link minifiers like [[:ru:User:Stjn/minilink.js]] often remove titles from links
    if ( utils.isEmpty( this.page.title ) && this.mw.hasLine ) {
        this.page.title = this.mw.title;
    }

    // Validate page params
    this.page.isValid = this.validate();

    // Extend page object
    this.page = utils.extendPage( this.page );

    switch ( this.options.behavior ) {
        // Add an event on the existing link
        case 'event':
            this.renderEvent();
            break;

        // Render actions for the MediaWiki's link
        case 'basic':
            this.renderBasic();
            break;

        // Render actions lazily for the user-contributed links
        case 'default':
        default:
            this.renderRequest();
            break;
    }
};

Link.prototype.validate = function () {
    // Prepare a request for a revision
    if ( utils.isValidID( this.page.oldid ) && utils.isEmpty( this.page.diff ) ) {
        this.options.type = 'revision';
        return true;
    }

    // Prepare a compare by given ids
    if ( utils.isValidID( this.page.diff ) || utils.isValidID( this.page.oldid ) ) {
        this.options.type = 'diff';

        // Swap parameters if oldid is a direction and a title is empty
        if ( utils.isEmpty( this.page.title ) && utils.isValidDir( this.page.oldid ) ) {
            const dir = this.page.oldid;
            this.page.oldid = this.page.diff;
            this.page.diff = dir;
        }

        // Swap parameters if oldid is empty: special pages do not have a page title attribute
        if ( utils.isEmpty( this.page.oldid ) ) {
            this.page.oldid = this.page.diff;
            this.page.diff = this.page.direction;
        }

        // Fix a tenet bug
        if (
            utils.isValidID( this.page.oldid ) &&
            utils.isValidID( this.page.diff ) &&
            parseInt( this.page.oldid ) > parseInt( this.page.diff )
        ) {
            const diff = this.page.oldid;
            this.page.oldid = this.page.diff;
            this.page.diff = diff;
        }
        return true;
    }

    // Prepare a compare by given title and direction
    if ( !utils.isEmpty( this.page.title ) && utils.isValidDir( this.page.diff ) ) {
        this.options.type = 'diff';
        return true;
    }

    // Prepare a page by given curid
    if ( utils.isValidID( this.page.curid ) ) {
        this.options.type = 'revision';
        this.options.typeVariant = 'page';
        return true;
    }

    return false;
};

/*** OBSERVER ***/

Link.prototype.observe = function () {
    if ( this.isObserved ) return;
    this.isObserved = true;
    id.local.observer.observe( this.node );
};

Link.prototype.unobserve = function () {
    if ( !this.isObserved ) return;
    this.isObserved = false;
    id.local.observer.unobserve( this.node );
};

Link.prototype.onIntersect = function () {
    if ( this.isLoading || this.isLoaded || !this.isObserved ) return;
    this.unobserve();
    this.request();
};

/*** REQUESTS ***/

Link.prototype.renderRequest = function () {
    this.hasRequest = this.page.isValid;

    if ( this.hasRequest ) {
        this.toggleSpinner( true );
        this.observe();
    } else {
        this.toggleSpinner( false );
        this.isLoaded = true;
        this.isProcessed = false;
        this.unobserve();
    }
};

Link.prototype.request = function () {
    switch ( this.options.type ) {
        case 'revision':
            this.requestRevision();
            break;

        case 'diff':
            this.requestDiff();
            break;
    }
};

/*** REQUEST REVISION ***/

Link.prototype.requestRevision = function () {
    if ( this.isLoading ) return;

    this.isLoading = true;
    this.error = null;

    const params = {
        action: 'query',
        prop: 'revisions',
        rvprop: [ 'ids', 'timestamp', 'user', 'comment', 'content' ],
        rvslots: 'main',
        rvsection: 0,
        format: 'json',
        formatversion: 2,
        uselang: id.local.language,
    };

    if ( !utils.isEmpty( this.page.oldid ) ) {
        params.revids = this.page.oldid;
    } else if ( !utils.isEmpty( this.page.curid ) ) {
        params.pageids = this.page.curid;
    }

    return id.local.mwApi
        .get( params )
        .then( this.onRequestRevisionDone.bind( this ) )
        .fail( this.onRequestRevisionError.bind( this ) );
};

Link.prototype.onRequestRevisionError = function ( error, data ) {
    this.isLoading = false;

    this.error = {
        type: 'revision',
        code: !utils.isEmpty( this.page.curid ) ? 'curid' : 'generic',
    };

    if ( data?.error ) {
        this.error.code = data.error.code;
        this.error.message = data.error.info;
    } else {
        this.error.message = error;
        utils.notifyError( `error-revision-${ this.error.code }`, this.page, this.error, true );
    }

    this.renderError();
};

Link.prototype.onRequestRevisionDone = function ( data ) {
    this.isLoading = false;

    // Render error if the query request is completely failed
    const query = data?.query;
    if ( !query || ( !query.badrevids && !query.badpageids && !query.pages ) ) {
        return this.onRequestRevisionError( null, data );
    }

    // Get a page for the query request
    const page = query.pages?.[ 0 ];
    const revision = page?.revisions?.[ 0 ];

    // Check for a specific error code
    const error = { type: 'revision' };
    if ( query.badrevids ) {
        error.code = 'badrevids';
    } else if ( query.badpageids ) {
        error.code = 'badpageids';
    } else if ( !page || page.missing || !revision ) {
        error.code = 'missing';
    } else if ( page.invalid ) {
        error.code = 'invalid';
        error.info = page.invalidreason;
    }

    // Render error if exist
    if ( error.code ) {
        this.error = error;
        return this.renderError();
    }

    this.revision = revision;
    this.page.isHidden = utils.isRevisionHidden( this.revision );
    this.page = utils.extendPage( this.page, {
        title: page.title,
        section: utils.getRevisionSection( this.revision ),
    } );

    this.renderSuccess();
};

/*** REQUEST DIFF ***/

Link.prototype.requestDiff = function () {
    if ( this.isLoading ) return;

    this.isLoading = true;
    this.error = null;

    const params = {
        action: 'compare',
        prop: [ 'title', 'ids', 'timestamp', 'user', 'comment' ],
        fromrev: utils.isValidID( this.page.oldid ) ? this.page.oldid : undefined,
        fromtitle: !utils.isEmpty( this.page.title ) ? this.page.title : undefined,
        torev: utils.isValidID( this.page.diff ) ? this.page.diff : undefined,
        torelative: utils.isValidDir( this.page.diff ) ? this.page.diff : undefined,
        format: 'json',
        formatversion: 2,
        uselang: id.local.language,
    };
    return id.local.mwApi
        .get( params )
        .then( this.onRequestDiffDone.bind( this ) )
        .fail( this.onRequestDiffError.bind( this ) );
};

Link.prototype.onRequestDiffError = function ( error, data ) {
    this.isLoading = false;

    this.error = {
        type: 'diff',
    };

    if ( data?.error ) {
        this.error.code = data.error.code;
        this.error.message = data.error.info;
    } else {
        this.error.message = error;
        utils.notifyError( 'error-diff-generic', this.page, this.error, true );
    }

    this.renderError();
};

Link.prototype.onRequestDiffDone = function ( data ) {
    this.isLoading = false;

    // Render error if the compare request is completely failed
    this.compare = data?.compare;
    if ( !this.compare ) {
        return this.onRequestDiffError( null, data );
    }

    this.page.isHidden = utils.isCompareHidden( this.compare );
    this.page = utils.extendPage( this.page, {
        title: utils.getCompareTitle( this.compare ),
        section: utils.getCompareSection( this.compare ),
    } );

    this.renderSuccess();
};

/*** RENDER ***/

Link.prototype.renderEvent = function () {
    if ( !this.page.isValid ) return;

    this.action.button = new Button( {
        node: this.node,
        handler: this.openDialog.bind( this ),
        ariaHaspopup: true,
    } );

    this.renderSuccess();
};

Link.prototype.renderBasic = function () {
    if ( !this.page.isValid || ( this.mw.isDiffOnly && this.options.type !== 'diff' ) ) return;

    this.renderSuccess();
};

Link.prototype.renderError = function () {
    this.isLoaded = true;
    this.isProcessed = false;
    this.toggleSpinner( false );

    // Render actions panel
    if ( this.options.behavior !== 'event' ) {
        this.renderWrapper();

        let messageName;
        if ( this.error.type ) {
            messageName = `error-${ this.error.type }-${ this.error.code || 'generic' }`;
            if ( !utils.isMessageExists( messageName ) ) {
                messageName = `error-${ this.error.type }-generic`;
            }
        }
        const message = utils.getErrorMessage( messageName, this.page, this.error );

        this.nodes.$error = $( '<span>' )
            .text( utils.getLabel( 'error' ) )
            .attr( 'title', message )
            .addClass( [ 'item', 'error', 'error-info' ] )
            .appendTo( this.nodes.inner );

        this.embed( this.node, this.options.insertMethod );
    }

    mw.hook( `${ id.config.prefix }.link.renderError` ).fire( this );
};

Link.prototype.renderSuccess = function () {
    this.isLoaded = true;
    this.isProcessed = true;
    this.toggleSpinner( false );

    // Render actions panel
    if ( this.options.behavior !== 'event' ) {
        this.renderWrapper();

        if ( this.mw.hasLink || this.revision || this.compare ) {
            this.renderLinkAction();
        }
        if ( this.config.showPageLink ) {
            this.renderPageAction();
        }

        this.embed( this.node, this.options.insertMethod );
    }

    mw.hook( `${ id.config.prefix }.link.renderSuccess` ).fire( this );
};

Link.prototype.renderWrapper = function () {
    this.nodes.container = this.nodes.inner = document.createElement( 'span' );
    this.nodes.container.classList.add( ...[ 'instantDiffs-panel', 'nowrap', 'noprint' ] );
};

Link.prototype.renderAction = function ( params ) {
    params = $.extend( {
        tag: 'a',
        label: null,
        title: null,
        href: null,
        target: utils.getTarget( this.options.initiatorDialog ),
        handler: null,
        classes: [],
        modifiers: [],
        container: this.nodes.inner,
    }, params );

    params.classes = [ 'item', 'text', 'instantDiffs-action', ...params.classes ];
    params.modifiers.forEach( modifier => params.classes.push( `instantDiffs-action--${ modifier }` ) );

    return new Button( params );
};

Link.prototype.getLinkTitle = function ( title ) {
    // Get an original title from the link
    if ( this.mw.isAltTitle && !utils.isEmpty( this.node.title ) ) {
        return this.node.title;
    }

    // Indicate about hidden revisions
    if ( this.page.isHidden ) {
        title = `${ title }-admin`;
    }

    return utils.msg( title );
};

Link.prototype.renderLinkAction = function () {
    const title = this.getLinkTitle( `${ this.options.type }-title` );

    if ( !utils.defaults( 'showLink' ) ) {
        return this.mutateLinkAction( title );
    }

    const classes = [];
    if ( this.page.isHidden ) {
        classes.push( 'error', 'error-admin' );
    }

    this.action.button = this.renderAction( {
        label: utils.getLabel( this.options.type ),
        title: title,
        classes: classes,
        modifiers: [ this.options.type ],
        handler: this.openDialog.bind( this ),
        ariaHaspopup: true,
    } );
};

Link.prototype.mutateLinkAction = function ( title ) {
    const classes = [ 'instantDiffs-link', `instantDiffs-link--${ this.options.type }`, `is-${ this.options.insertMethod }` ];
    if ( this.page.isHidden ) {
        classes.push( 'instantDiffs-link--error' );
    }

    this.node.classList.remove( 'external' );
    this.node.classList.add( ...classes );
    this.node.setAttribute( 'data-instantdiffs-link', this.options.behavior );

    this.action.button = new Button( {
        node: this.node,
        handler: this.openDialog.bind( this ),
        ariaHaspopup: true,
        altTitle: title,
        useAltKey: true,
    } );
};

Link.prototype.renderPageAction = function () {
    this.page.button = this.renderAction( {
        label: utils.getLabel( 'page' ),
        title: this.page.titleTextSection || this.page.titleText,
        href: this.page.href,
        modifiers: [ 'page' ],
    } );
};

/*** DIALOG ***/

Link.prototype.openDialog = function () {
    if ( id.local.dialog && id.local.dialog.isLoading ) return;

    const options = {
        initiatorDiff: this.options.initiatorDiff,
        onOpen: this.onDialogOpen.bind( this ),
        onClose: this.onDialogClose.bind( this ),
    };
    if ( !id.local.dialog ) {
        id.local.dialog = new Dialog( this, options );
    } else {
        id.local.dialog.process( this, options );
    }

    this.toggleLoader( true );
    $.when( id.local.dialog.load() ).always( () => this.toggleLoader( false ) );
};

Link.prototype.onDialogOpen = function () {
    if ( this.mw.hasLine && this.config.highlightLine ) {
        this.mw.$line.addClass( 'instantDiffs-line--highlight' );
    }

    if ( utils.isFunction( this.options.onOpen ) ) {
        this.options.onOpen( this );
    }

    if ( this.options.initiatorLink instanceof Link ) {
        this.options.initiatorLink.onDialogOpen();
    }
};

Link.prototype.onDialogClose = function () {
    if ( this.mw.hasLine ) {
        if ( this.config.highlightLine ) {
            this.mw.$line.removeClass( 'instantDiffs-line--highlight' );
        }
        if (
            this.config.markWatchedLine &&
            id.config.changeLists.includes( mw.config.get( 'wgCanonicalSpecialPageName' ) )
        ) {
            this.mw.$line
                .removeClass( id.config.mwLine.unseen )
                .addClass( id.config.mwLine.seen );
        }
    }

    if ( utils.isFunction( this.options.onClose ) ) {
        this.options.onClose( this );
    }

    if ( this.options.initiatorLink instanceof Link ) {
        this.options.initiatorLink.onDialogClose();
    }
};

/*** ACTIONS ***/

Link.prototype.toggleLoader = function ( value ) {
    if ( this.action.button ) {
        this.action.button.pending( value );
    } else {
        this.node.classList.toggle( 'instantDiffs-link--pending', value );
    }
};

Link.prototype.toggleSpinner = function ( value ) {
    const classes = utils.getPlaceholderClasses( [ 'loader', this.options.type ] );

    if ( value ) {
        this.node.classList.add( ...classes );
    } else {
        this.node.classList.remove( ...classes );
    }
};

Link.prototype.embed = function ( container, insertMethod ) {
    utils.embed( this.nodes.container, container, insertMethod );
};

Link.prototype.getContainer = function () {
    return this.nodes.container;
};

Link.prototype.getNode = function () {
    return this.node;
};

Link.prototype.getInitiatorLink = function () {
    return this.options.initiatorLink || this;
};

Link.prototype.getPage = function () {
    return this.page;
};

Link.prototype.getType = function () {
    return this.options.type;
};

Link.prototype.getTypeVariant = function () {
    return this.options.typeVariant;
};

export default Link;